spring.datasource.url=jdbc:postgresql://localhost:5432/pma-springbootdb
spring.datasource.username=postgres
spring.datasource.password=password321

spring.datasource.initialization-mode=never

spring.jpa.hibernate.ddl-auto=none

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.jpa.show-sql=true
spring.thymeleaf.cache=false
version=3.0.0

#Root includes everything from spring framework to other libraries in the project
#So if u set it to DEBUG , u'll see so much logging info 
#Typically, logging level at root should be set to WARN, so that u could only see things that are messed up i.e. warnings,etc.
logging.level.root=WARN

#This is just at application level 
logging.level.com.jrp.pma = DEBUG

#We can set spring-framework logging to INFO
logging.level.org.springframework=INFO

#These are called logging level hierarchy:

# 1.The lowest level being TRACE (The most granular, it captures every single thing, ur log file would be huge and typically it's not a recommended level)
# 2.The next level above TRACE is DEBUG. it is generally set at the application level.
# 3.After that is INFO which is a higher level logging and we set it for spring-framework, to get a high level idea of what the spring-framework is doing.
# 4.The next level above INFO is WARN, which is a more higher level and fcusses on the problems and warnings. SO keep an eye on it to get ERRORS.
# 5. The final level is ERROR.
# So, the idea is if u take TRACE as the leveel of logging then it will take all of the levels - DEBUG,INFO,WARN and ERROR as well.
# So, whatever will be ur level of logging, everything above that including the specified level will be displayed in the logs


# To make the app production-ready, we have to specify the log file
logging.file.name =app.log  

 
# Another thing, u can replace is the logging pattern for date
#But it's better to leave it as default
#logging.pattern.dateformat=yyyy-mm-dd

#Using this we make sure that persistence validation is turned off, and we only have validation once.
#Generally, when u are dealing validation involving database, then twice validation happens. First time while reading from the databse,
# Second time, when iserting the data to databse. But after first validation, the empRepo object goes out of Spring context and 
#hence during the second validation NullPointer exception is thrown.
#So using this property we have only 1 validation,  thqat's on the client side!
spring.jpa.properties.javax.persistence.validation.mode=none
